from __future__ import print_function
__author__ = 'Louis Le'
import CoolProp.CoolProp as CP
# import CoolProp.Plots as CPP
from CoolProp import AbstractState
from CoolProp.CoolProp import PhaseSI,PropsSI, get_global_param_string
from CoolProp.HumidAirProp import HAPropsSI
from math import sin
import matplotlib.pyplot as plt
from pandas import DataFrame, Series
import pandas as pd
import numpy as np
import time
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
start_time =time.time()
"""
print("****************Information*****************")
print("This example was auto-generated by the language-agnostic dev/scripts/example_generator.py script written by Ian Bell")
print("CoolProp version:", get_global_param_string("version"))
print("CoolProp gitrevision:", get_global_param_string("gitrevision"))
print("CoolProp fluids:",get_global_param_string("FluidsList"))
# See http://www.coolprop.org/coolprop/HighLevelAPI.html#table-of-string-inputs-to-propssi-function for a list of inputs to high-level interface
print("*********** HIGH LEVEL INTERFACE *****************")
print("Critical temperature of water:", PropsSI("Water","Tcrit"),"K")
print("Boiling temperature of water at 101325 Pa:", PropsSI("T","P",101325,"Q",0,"Water"),"K")
print("Air density at room temperature and pressure of 101325 Pa:", PropsSI("D","T",300,"P",101325,"Air"),"kg/m3")

print('**************High-level interface********************')
# For many users, all that is needed is a simple call to the PropsSI function for pure fluids, pseudo-pure fluids and mixtures.
# Saturation temperature of water at 1 atm in K
print('Satuaration temperature of water at 1 atm in K:',PropsSI('T','P',101325,'Q',0,'Water'))
print('********************PhaseSI function*******************')
# it can be useful to know what the phase of a given state point is.
print('Phase of water liquid saturation using PhaseSI function:',PhaseSI('P',101325,'Q',0,'Water'))
# The phase index (as floating point number) can also be obtained using the PropsSI function
print('Phase of water liquid saturation using PropsSI function:',PropsSI('Phase','P',101325,'Q',0,'Water'))
# where you can obtain the integer indices corresponding to the phase flags using the get_phase_index function
print('the phase indice corresponding to twophase',CP.get_phase_index('phase_twophase'))
print('the phase indice corresponding to liquid',CP.get_phase_index('phase_liquid'))
print('the phase indice corresponding to vapeur',CP.get_phase_index('phase_gas'))
print('************Partial derivatives**********************')
# First partial derivatives
# For some applications it can be useful to have access to partial derivatives of thermodynamic properties. A generalized first partial derivative has
# been implemented into CoolProp, which can be using the PropSI function by encoding the desired derivative as a string. The format of the string is d(OF)/d(WRT)|CONSTANT
# c_p using c_p
print('cp of water using cp:',PropsSI('C','P',101325,'T',300,'Water'))
# c_p using derivative
print('cp using derivative:',PropsSI('d(Hmass)/d(T)|P','P',101325,'T',300,'Water'))

print('*************Predefined Mixtures***************')
print(CP.get_global_param_string('predefined_mixtures').split(',')[0:6])
print(PropsSI('D','P',101325,'T',300,'Air.mix'))
print('************Reference states*********')
# Enthalpy and entropy are relative properties! You should always be comparing differences in enthalpy rather than absolute values of the enthalpy or entropy. That said
# if can be useful to set the reference state values for enthalpy and entropy to one of a few standard values.
print('**************Property plot***************')

ph_plot=CPP.PropsPlot('Water','Ph')
ph_plot.savefig('enthalpy_pressure_graph_for_Water.png')
plt.title('P-s diagram of Water')
plt.xlabel('Specific enthalpy' r'$\left[\frac{J}{kg.K}\right]$',fontsize = 16,color='red')
plt.text(500,20000,r'$\mu = 100,\ \sigma = 15$')
#plt.show()

CP.set_reference_state('n-Propane','ASHRAE')
print(PropsSI('H','T',233.15,'Q',0,'n-Propane'))


# Using properties from CoolProp to get R410A density
print("Density of R4101 using CoolProp:",PropsSI('D','T',300,'P',101325,'HEOS::R32[0.697615]&R125[0.302385]'))
print("Density of R4101 using REFPROP:",PropsSI('D','T',300,'P',101325,'REFPROP::R32[0.697615]&R125[0.302385]'))

#Data1_FT_0101 = pd.read_csv(open("E:\Study\PostDocULg\DataCMI\Mesures_four\Data1\FT_0101.csv","rU",encoding="utf-16"),delimiter=";",converters={'FT_0101 ValueY': lambda x: float(x.replace(',','.'))})
#print(Data1_FT_0101['FT_0101 ValueY'][1:1000])
#plt.plot(Data1_FT_0101['FT_0101 ValueY'][1:1000])
#newData = (Data1_FT_0101['FT_0101 ValueY'][0:len(Data1_FT_0101)])*2
#print(newData)
print('*****************Getting started with pandas***************')
print('************Essential basic functionality****************')
print('*****************Introducing to pandas data structures*************')
# Two workhorse data structures: Series and DataFrame
print('**************Series******************')
# A Series is a one-dimensional array like object containing an array of data (of any NumPy data type) and an associated array of data labels, called its index.
obj1 = Series([4,7,-5,3])
obj2 = Series([1,2,5])
obj = obj1+obj2
print(obj)
# Since we did not specify an index for the data, a default one consisting of the integers 0 through N-1 (where N is the length of the data) is created
print(obj.values)
print(obj.index)
#Often it will be desirable to create a Series with and index identifying each data point
obj3 = Series([4,7,-5,3],index=['d','b','a','c'])
print(obj3)
print(obj3.index)
print(obj3['a'])
print(obj3['d'])
print(obj3[['c','d','a']])
# NumPy array operations, such as filtering with a boolean array, scalar multiplication, or applying math functions, will preserve the index-value link
print(obj3[obj3>0])
print(obj3*2)
print(np.exp(obj3))
print('b' in obj3)
print('e' in obj3)
sdata = {'Ohio':35000,'Texas':71000}
obj4 = Series(sdata)
print(obj4)
states=['Cali','Ohio']
obj5 = Series(sdata,index=states)
print(obj5)
print(pd.isnull(obj5))
print(pd.notnull(obj5))
print(obj5.isnull())
obj.index=['bob','steve','jeff','ryan']
print(obj)
print('**********DataFrame*************$')
# A DataFrame represents a tabular, spreadsheet-like data structure containing an ordered colection of Columns, each of which can be different value type (numeric, string, boolean, etc.)
# The DataFrame has both a row and column index; it can be thought of as a dict of Series (one for all sharing the same index)
# There are numerous way to construct a DataFrame, though one of the most common is from a dict of equal-length list of NumPy arrays
data = {'state':['Ohio','Ohio','Nevada','Nevada'],
        'year':[2000, 2002, 2000,2002],
        'pop':[1.5,1.7,2.4,2.9]}
frame = DataFrame(data)
print(frame)
# If you specify a sequence of columns, the DataFrame's colums wil be exactly what you pass
frame=DataFrame(data,columns=['year','state','pop'])
print(frame)
frame2 = DataFrame(data, columns=['year','state','pop','debt'],index=['one','two','three','four'])
print(frame2)
print(frame2['state'])
print(frame2.year)
print(frame2.ix['three'])
frame2['debt']=16.5
print(frame2)
frame2['debt']=np.arange(4.)
print(frame2)
print('***************Index Objects***************')
print(Series(range(3),index=['a','b','c']))

print('**********Essential Functionality*************')


print('************Controlling line properties*************')
# Lines have many attributes that you can set: linewidth, dash style, anatialiased, etc. There are several ways to set line properties



print('*************Working with multiple figures and axes********************')
# Matlab and pyplot have the concept of the curret figure and the current axes. All plotting commands apply the current axes.

def f(t):
        return np.exp(-t)*np.cos(2*np.pi*t)

t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure(2)
plt.subplot(211)
plt.plot(t1,f(t1),'bo',t2,f(t2),'k')
plt.savefig('Fig5.png')


plt.subplot(212)
plt.plot(t2,np.cos(2*np.pi*t2),'g^')

plt.subplot(221)
# red dashes, blue squares and green triangles
plt.plot(t2,np.cos(2*np.pi*t2)+0.5,'r--',t2,np.cos(2*np.pi*t2),'bs',t2,np.cos(2*np.pi*t2)-0.5,'g^')
plt.ylabel('y label', fontsize=14, color='red')
plt.xlabel('x label',fontsize = 20, color='green')

plt.axis([0,5,-5,5])

plt.subplot(222)
line = plt.plot(t2,np.cos(2*np.pi*t2)+0.5,'r--',lw=5)
plt.annotate('local max',xy=(2,1.5),xytext=(3,2.5),arrowprops=dict(facecolor='black',shrink=0.05))
plt.axis([0,5,-0.5,5])
plt.savefig('Fig6.png')
plt.show()

# The figure() command here is optional because figure(1) will be created by default, just a subplot (111) will be created by default if you don't
# manually specify an axes

plt.figure(3)
plt.plot([4,5,6])

print('************Annotating text**********')


rho_0 = PropsSI('D','P',1e5,'T',273.15,'Air')

print('density of air at 800 C:',rho_0*273.15/(800+273.15) )
print('density of air at 800 C:', PropsSI('D','P',1e5,'T',800+273.15,'Air'))

help(len)
help(plt.plot)
help(plt.xlabel)
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
"""
T1 = 323
S1 = 5706
H1 = CP.PropsSI('H','T',T1,'S',S1,'Water')
Qual = CP.PropsSI('Q','T',T1,'S',S1,'Water')
HsatV = CP.PropsSI('H','T',T1,'Q',1,'Water')
HsatL = CP.PropsSI('H','T',T1,'Q',0,'Water')
H2 = HsatV*Qual + HsatL*(1-Qual)
print("The quality is:",round(Qual*100,1),"%")
print("The enthalpy calculated from quality and saturated enthalpies:",round(H2,2),"J/kg")
print("The enthalpy calculated by CoolProp at the same state is:",round(H1,2),"J/kg")

T_crit = CP.PropsSI('REFPROP::R245fa',"Tcrit")
k       = CP.PropsSI('L','T',298,'Q',0,'REFPROP::Methanol')
print(T_crit,k)
T = 273.15
for i in range(1,50):
    T=T+i
    cp = CP.PropsSI('C','P',1013250,'T',T,'HEOS::R245FA')
    # h = CP.PropsSI('H','P',1013250,'T',T,'R245fa')
    # s = CP.PropsSI('S','P',1013250,'T',T,'R245fa')
    # rho = CP.PropsSI('D','P',1013250,'T',T,'R245fa')
    #print(h,s,rho)



print("-------%s seconds------" % (time.time()-start_time))




